
AUTOMAKE_OPTIONS = foreign
BUILDDIR := ../build
TARGET:=../minisatip

CXX=@CXX@
DVBCSA=@DVBCSA@
DVBCA=@DVBCA@
SATIPCLIENT=@SATIPCLIENT@
NETCVCLIENT=@NETCVCLIENT@
STATIC=@STATIC@
DVBAPI=@DVBAPI@
LINUXDVB=@LINUXDVB@
DDCI=0

CXXFLAGS?=-Wall -Wno-date-time -Wno-switch -ggdb -fPIC -fno-common -Warray-bounds
CXXFLAGS += -I../src
CXXFLAGS += $(EXTRA_CFLAGS) @CFLAGS@
LDFLAGS += @LDFLAGS@ -lpthread
CPPFLAGS += @CPPFLAGS@

OS := $(shell $(CXX) -v 2>&1 | grep Target | sed 's/Target: //' | cut -d- -f 2)
ARCH := $(shell $(CXX) -v 2>&1 | grep Target | sed 's/Target: //' | cut -d- -f 1)
VERSION := $(shell ../tools/determine_version.sh)
CXXFLAGS+=-DVERSION=\"$(VERSION)\"

ifneq ($(OS),apple)
        LDFLAGS += -lrt
else
	LINUXDVB=0
	DVBCA=0
	NETCVCLIENT=0
endif

SOURCES=\
	minisatip.cpp \
	socketworks.cpp \
	stream.cpp \
	adapter.cpp \
	httpc.cpp \
	opts.cpp \
	utils.cpp \
	api/symbols.cpp \
	api/variables.cpp \
	utils/dvb/dvb_support.cpp \
	utils/logging/logging.cpp \
	utils/alloc.cpp \
	utils/fifo.cpp \
	utils/hash_table.cpp \
	utils/mutex.cpp \
	utils/ticks.cpp \
	utils/uuid.cpp

TABLES=0
PMT=0

ifeq ($(DVBCSA),1)
LIBS+=dvbcsa
SOURCES+=csa.cpp
PMT=1
else
CXXFLAGS+=-DDISABLE_DVBCSA
endif

ifeq ($(DVBAPI),1)
SOURCES+=dvbapi.cpp
TABLES=1
PMT=1
else
CXXFLAGS+=-DDISABLE_DVBAPI
endif

ifeq ($(DVBCA),1)
LIBS+=crypto
LDFLAGS += -ldl
SOURCES+=ca.cpp aes.cpp
TABLES=1
PMT=1
ifeq ($(OS),linux)
DDCI=1
endif
else
CXXFLAGS+=-DDISABLE_DVBCA
endif

ifeq ($(PMT),1)
SOURCES+=pmt.cpp
else
CXXFLAGS+=-DDISABLE_PMT
endif

ifeq ($(TABLES),1)
SOURCES+=tables.cpp
else
CXXFLAGS+=-DDISABLE_TABLES
endif

ifeq ($(SATIPCLIENT),1)
SOURCES+=satipc.cpp
else
CXXFLAGS+=-DDISABLE_SATIPCLIENT
endif

ifeq ($(NETCVCLIENT),1)
SOURCES+=netceiver.cpp
LDFLAGS+=-lnetceiver -lxml2 -llzma -lz
else
CXXFLAGS+=-DDISABLE_NETCVCLIENT
endif

ifeq ($(LINUXDVB),1)
SOURCES+=dvb.cpp
else
CXXFLAGS+=-DDISABLE_LINUXDVB
SOURCES+=dvb.cpp
endif

ifeq ($(DDCI),1)
SOURCES+=ddci.cpp
else
CXXFLAGS+=-DDISABLE_DDCI
endif

ifeq ($(DEBUG),1)
CXXFLAGS += -fsanitize=address -fno-omit-frame-pointer -fsanitize=leak -fsanitize=undefined -static-libasan -static-libubsan -static-liblsan -fstack-protector-all
else
CXXFLAGS += -O2
endif

ifeq ($(STATIC),1)
	LDFLAGS+=$(addsuffix .a,$(addprefix -l:lib,$(LIBS)))
	LDFLAGS+=-static
else
	LDFLAGS+=$(addprefix -l,$(LIBS))
endif

SOURCES+=$(SOURCES-1)
CXXFLAGS+=$(CFLAGS-1)
LDFLAGS+=$(LDFLAGS-1)

OBJS := $(patsubst %.cpp, $(BUILDDIR)/%.o, $(SOURCES))
DEPS=$(OBJS:.o=.d)

$(TARGET): $(DEPS) $(OBJS) $(SOURCES)
	$(CXX) $(CXXFLAGS) -o $@ $(OBJS) $(LDFLAGS)

$(BUILDDIR)/%.d : %.cpp
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) -MM $(basename $*).cpp | sed -e 's@^\(.*\)\.o:@\1.d \1.o:@' > $@

$(BUILDDIR)/%.o : %.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $*.cpp -o $@

all: $(TARGET)

clean:
	rm -rf $(BUILDDIR) $(TARGET) >> /dev/null

# pull in dependency info for *existing* .o files
ifneq "$(MAKECMDGOALS)" "clean"
-include $(DEPS)
endif
